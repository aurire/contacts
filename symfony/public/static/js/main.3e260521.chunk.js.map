{"version":3,"sources":["reducers/rootReducer.js","constants/actionTypes.js","actions/index.js","pages/Logged/User/Contacts/List.js","pages/Logged/User/Contacts/ContactsCreateEdit.js","pages/Logged/User/Contacts/ContactsShare.js","pages/Logged/User/Contacts/ContactsSharedWithMe.js","pages/Logged/User/UserSettings.js","pages/Logged/User.js","constants/strings.js","components/UnloggedNavigation.js","pages/Login.js","pages/Register.js","AppRouter.js","App.js","index.js"],"names":["initialState","loading","loaded","dataFetchFinished","userFetchFinished","mainActionFinished","error","userData","user","alert","alertShown","contacts","contact","shared","deleted","search","rootReducer","state","action","type","payload","headers","location","data","msg","page","items","id","item","email","HOST","getUserData","dispatch","userId","split","axios","get","pop","withCredentials","then","res","getUserDataSuccess","catch","err","initiateLoginStarted","isLoading","initiateLoginSuccess","initiateLoginFailed","initiateLogoutStarted","initiateLogoutSuccess","initiateLogoutFailed","initiateRegisterStarted","initiateRegisterSuccess","initiateRegisterFailed","setAlert","initiateContactCreateStarted","initiateContactCreateSuccess","initiateContactCreateFailed","fetchContactListStarted","fetchContactListSuccess","fetchContactListFailed","fetchContactStarted","fetchContactSuccess","fetchContactFailed","initiateContactEditStarted","initiateContactEditSuccess","initiateContactEditFailed","initiateContactShareStarted","initiateContactShareSuccess","initiateContactShareFailed","fetchSharedForUserStarted","fetchSharedForUserSuccess","fetchSharedForUserFailed","deleteShareStarted","deleteShareSuccess","deleteShareFailed","deleteContactStarted","deleteContactSuccess","deleteContactFailed","initiateUserUpdateStarted","initiateUserUpdateSuccess","initiateUserUpdateFailed","fetchByEmailStarted","fetchByEmailSuccess","fetchByEmailFailed","List","props","onDeleteClick","bind","event","preventDefault","this","deleteContact","target","dataset","match","params","listItems","map","ListGroup","Item","key","style","fontWeight","fontSize","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","Date","to","href","data-id","onClick","view","includes","first","Pagination","First","next","Next","Ellipsis","prev","Prev","last","Last","curPage","current","active","history","listen","pathParts","pathname","pageId","lastPart","localStorage","getItem","fetchContactList","prevProps","prevState","snapshot","Object","keys","length","setState","getContacts","getPager","React","Component","connectedList","connect","owner","delete","withRouter","ContactsCreateEdit","_isMounted","name","phone","contactShares","refreshing","handleChange","handleSubmit","handleDelete","value","getCreateOrEdit","initiateContactCreate","initiateContactEdit","getContactId","deleteShare","push","thisContact","nid","fetchContact","Form","Group","Label","Control","onChange","placeholder","Text","className","Button","variant","contactShare","hasOwnProperty","shareThis","getForm","getContactShares","connectedContactsCreateEdit","ownerId","post","put","ContactsShare","userid","handleSearchSubmit","handleShareSubmit","getResults","fetchByEmail","initiateContactShare","response","replace","message","onSubmit","title","results","result","as","custom","ConnectedContactsShare","encodeURIComponent","ContactsSharedWithMe","fetchSharedForUser","console","log","ConnectedContactsSharedWithMe","UserSettings","dataLoaded","initiateUserUpdate","phoneNumber","connectedUserSettings","User","handleLogoutClick","initiateLogout","Alert","Navbar","bg","expand","sticky","Brand","Toggle","aria-controls","Collapse","Nav","Link","color","path","component","connectedUser","removeItem","UnloggedNavigation","disabled","activeLink","Login","password","initiateLogin","role","data-dismiss","aria-label","aria-hidden","connectedLogin","setItem","Register","initiateRegister","connectedRegister","AppRouter","locationChanged","Spinner","animation","exact","connectedAppRouter","App","Container","Jumbotron","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e260521.chunk.js","sourcesContent":["import {\n    INITIATE_LOGIN_STARTED,\n    INITIATE_LOGIN_FAILURE,\n    INITIATE_LOGIN_SUCCESS,\n    INITIATE_LOGOUT_STARTED,\n    INITIATE_LOGOUT_FAILURE,\n    INITIATE_LOGOUT_SUCCESS,\n    GET_USER_DATA_SUCCESS,\n    INITIATE_REGISTER_STARTED,\n    INITIATE_REGISTER_SUCCESS,\n    INITIATE_REGISTER_FAILURE,\n    LOCATION_CHANGED, SET_ALERT,\n    INITIATE_CONTACT_CREATE_STARTED,\n    INITIATE_CONTACT_CREATE_FAILURE,\n    INITIATE_CONTACT_CREATE_SUCCESS,\n    FETCH_CONTACT_LIST_STARTED,\n    FETCH_CONTACT_LIST_FAILURE,\n    FETCH_CONTACT_LIST_SUCCESS,\n    FETCH_CONTACT_SUCCESS,\n    FETCH_CONTACT_STARTED,\n    FETCH_CONTACT_FAILURE,\n    INITIATE_CONTACT_EDIT_SUCCESS,\n    INITIATE_CONTACT_EDIT_STARTED,\n    INITIATE_CONTACT_EDIT_FAILURE,\n    INITIATE_CONTACT_SHARE_SUCCESS,\n    INITIATE_CONTACT_SHARE_STARTED,\n    INITIATE_CONTACT_SHARE_FAILURE,\n    FETCH_SHARED_FOR_USER_SUCCESS,\n    FETCH_SHARED_FOR_USER_STARTED,\n    FETCH_SHARED_FOR_USER_FAILURE,\n    DELETE_SHARE_SUCCESS,\n    DELETE_SHARE_STARTED,\n    DELETE_SHARE_FAILURE,\n    DELETE_CONTACT_SUCCESS,\n    DELETE_CONTACT_STARTED,\n    DELETE_CONTACT_FAILURE,\n    INITIATE_USER_UPDATE_SUCCESS,\n    INITIATE_USER_UPDATE_FAILURE,\n    INITIATE_USER_UPDATE_STARTED,\n    FETCH_BY_EMAIL_SUCCESS,\n    FETCH_BY_EMAIL_STARTED,\n    FETCH_BY_EMAIL_FAILURE\n} from \"../constants/actionTypes\";\n\nconst initialState = {\n    loading: false,\n    loaded: false,\n    dataFetchFinished: false,\n    userFetchFinished: false,\n    mainActionFinished: false,\n    error: null,\n    userData: null,\n    user: null,\n    alert: null,\n    alertShown: true,\n    contacts: {},\n    contact: {},\n    shared: {},\n    deleted: {},\n    search: {}\n};\n\nconst rootReducer = (state = initialState, action) => {\n    if (INITIATE_LOGIN_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false,\n        };\n    } else if (INITIATE_LOGIN_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            userFetchFinished: false,\n            error: null,\n            user: action.payload.payload.headers.location\n        };\n    } else if (INITIATE_LOGIN_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            userFetchFinished: false,\n            loaded: false,\n            error: action.payload.error\n        };\n    } else if (GET_USER_DATA_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            userFetchFinished: true,\n            userData: action.payload.payload.data,\n            user: action.payload.payload.data['@id']\n        };\n    } else if (INITIATE_LOGOUT_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false,\n        };\n    } else if (INITIATE_LOGOUT_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            error: null,\n            userData: null,\n            user: null\n        };\n    } else if (INITIATE_LOGOUT_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            error: action.payload.error\n        };\n    } else if (INITIATE_REGISTER_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false\n        };\n    } else if (INITIATE_REGISTER_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            error: null\n        };\n    } else if (INITIATE_REGISTER_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            error: action.payload.error\n        };\n    } else if (LOCATION_CHANGED === action.type) {\n        return state.alertShown\n            ? {\n                ...state,\n                alert: null,\n                loaded: false,\n                deleted: {},\n                search: {},\n                dataFetchFinished: false,\n                mainActionFinished: false,\n                error: ''\n            } : {\n                ...state,\n                alertShown: true,\n                loaded: false,\n                deleted: {},\n                search: {},\n                dataFetchFinished: false,\n                mainActionFinished: false,\n                error: ''\n            };\n    } else if (SET_ALERT === action.type) {\n        return {\n            ...state,\n            alert: action.payload.msg,\n            alertShown: false\n        };\n    } else if (INITIATE_CONTACT_CREATE_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false\n        };\n    } else if (INITIATE_CONTACT_CREATE_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            mainActionFinished: true,\n            error: null,\n            contacts: {}\n        };\n    } else if (INITIATE_CONTACT_CREATE_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            error: action.payload.error\n        };\n    } else if (FETCH_CONTACT_LIST_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false\n        };\n    } else if (FETCH_CONTACT_LIST_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            error: null,\n            deleted: {},\n            contacts: {\n                ...state.contacts,\n                [action.payload.page]: action.payload.items.data\n            }\n        };\n    } else if (FETCH_CONTACT_LIST_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            error: action.payload.error\n        };\n    } else if (FETCH_CONTACT_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false,\n        };\n    } else if (FETCH_CONTACT_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            dataFetchFinished: true,\n            error: null,\n            contact: {\n                ...state.contact,\n                [action.payload.id]: action.payload.item.data\n            }\n        };\n    } else if (FETCH_CONTACT_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            dataFetchFinished: true,\n            error: action.payload.error\n        };\n    } else if (INITIATE_CONTACT_EDIT_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false\n        };\n    } else if (INITIATE_CONTACT_EDIT_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            mainActionFinished: true,\n            contacts: {},\n            error: null\n        };\n    } else if (INITIATE_CONTACT_EDIT_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            error: action.payload.error\n        };\n    } else if (INITIATE_CONTACT_SHARE_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false\n        };\n    } else if (INITIATE_CONTACT_SHARE_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            mainActionFinished: true,\n            error: null,\n            contacts: {}\n        };\n    } else if (INITIATE_CONTACT_SHARE_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            error: action.payload.error\n        };\n    } else if (FETCH_SHARED_FOR_USER_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false,\n        };\n    } else if (FETCH_SHARED_FOR_USER_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            dataFetchFinished: true,\n            error: null,\n            shared: {\n                ...state.shared,\n                [action.payload.page]: action.payload.item.data\n            }\n        };\n    } else if (FETCH_SHARED_FOR_USER_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            dataFetchFinished: true,\n            error: action.payload.error\n        };\n    } else if (DELETE_SHARE_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false\n        };\n    } else if (DELETE_SHARE_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            error: null,\n            contacts: {},\n            deleted: {\n                ...state.deleted,\n                [action.payload.id]: true\n            }\n        };\n    } else if (DELETE_SHARE_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            error: action.payload.error\n        };\n    } else if (DELETE_CONTACT_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false\n        };\n    } else if (DELETE_CONTACT_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            error: null,\n            deleted: {\n                ...state.deleted,\n                [action.payload.id]: true\n            }\n        };\n    } else if (DELETE_CONTACT_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            error: action.payload.error\n        };\n    } else if (INITIATE_USER_UPDATE_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false\n        };\n    } else if (INITIATE_USER_UPDATE_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            mainActionFinished: true,\n            userFetchFinished: true,\n            userData: action.payload.payload.data,\n            user: action.payload.payload.data['@id'],\n            contacts: {},\n            error: null\n        };\n    } else if (INITIATE_USER_UPDATE_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            error: action.payload.error\n        };\n    } else if (FETCH_BY_EMAIL_STARTED === action.type) {\n        return {\n            ...state,\n            loading: true,\n            loaded: false,\n        };\n    } else if (FETCH_BY_EMAIL_SUCCESS === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: true,\n            dataFetchFinished: true,\n            error: null,\n            search: {\n                ...state.search,\n                [action.payload.email]: {\n                    ...state.search[[action.payload.email]],\n                    [action.payload.page]: action.payload.item.data\n                }\n            }\n        };\n    } else if (FETCH_BY_EMAIL_FAILURE === action.type) {\n        return {\n            ...state,\n            loading: false,\n            loaded: false,\n            dataFetchFinished: true,\n            error: action.payload.error\n        };\n    }\n\n    return state;\n}\n\nexport default rootReducer;\n","export const FETCH_CONTACT_LIST_SUCCESS = 'FETCH_CONTACT_LIST_SUCCESS';\nexport const FETCH_CONTACT_LIST_FAILURE = 'FETCH_CONTACT_LIST_FAILURE';\nexport const FETCH_CONTACT_LIST_STARTED = 'FETCH_CONTACT_LIST_STARTED';\nexport const INITIATE_LOGIN_STARTED = 'INITIATE_LOGIN_STARTED';\nexport const INITIATE_LOGIN_SUCCESS = 'INITIATE_LOGIN_SUCCESS';\nexport const INITIATE_LOGIN_FAILURE = 'INITIATE_LOGIN_FAILURE';\nexport const INITIATE_LOGOUT_STARTED = 'INITIATE_LOGOUT_STARTED';\nexport const INITIATE_LOGOUT_SUCCESS = 'INITIATE_LOGOUT_SUCCESS';\nexport const INITIATE_LOGOUT_FAILURE = 'INITIATE_LOGOUT_FAILURE';\nexport const GET_USER_DATA_SUCCESS = 'GET_USER_DATA_SUCCESS';\nexport const INITIATE_REGISTER_STARTED = 'INITIATE_REGISTER_STARTED';\nexport const INITIATE_REGISTER_SUCCESS = 'INITIATE_REGISTER_SUCCESS';\nexport const INITIATE_REGISTER_FAILURE = 'INITIATE_REGISTER_FAILURE';\nexport const LOCATION_CHANGED = 'LOCATION_CHANGED';\nexport const SET_ALERT = 'SET_ALERT';\nexport const INITIATE_CONTACT_CREATE_STARTED = 'INITIATE_CONTACT_CREATE_STARTED';\nexport const INITIATE_CONTACT_CREATE_SUCCESS = 'INITIATE_CONTACT_CREATE_SUCCESS';\nexport const INITIATE_CONTACT_CREATE_FAILURE = 'INITIATE_CONTACT_CREATE_FAILURE';\nexport const FETCH_CONTACT_STARTED = 'FETCH_CONTACT_STARTED';\nexport const FETCH_CONTACT_SUCCESS = 'FETCH_CONTACT_SUCCESS';\nexport const FETCH_CONTACT_FAILURE = 'FETCH_CONTACT_FAILURE';\nexport const INITIATE_CONTACT_EDIT_STARTED = 'INITIATE_CONTACT_EDIT_STARTED';\nexport const INITIATE_CONTACT_EDIT_SUCCESS = 'INITIATE_CONTACT_EDIT_SUCCESS';\nexport const INITIATE_CONTACT_EDIT_FAILURE = 'INITIATE_CONTACT_EDIT_FAILURE';\nexport const INITIATE_CONTACT_SHARE_STARTED = 'INITIATE_CONTACT_SHARE_STARTED';\nexport const INITIATE_CONTACT_SHARE_SUCCESS = 'INITIATE_CONTACT_SHARE_SUCCESS';\nexport const INITIATE_CONTACT_SHARE_FAILURE = 'INITIATE_CONTACT_SHARE_FAILURE';\nexport const FETCH_SHARED_FOR_USER_STARTED = 'FETCH_SHARED_FOR_USER_STARTED';\nexport const FETCH_SHARED_FOR_USER_SUCCESS = 'FETCH_SHARED_FOR_USER_SUCCESS';\nexport const FETCH_SHARED_FOR_USER_FAILURE = 'FETCH_SHARED_FOR_USER_FAILURE';\nexport const DELETE_SHARE_STARTED = 'DELETE_SHARE_STARTED';\nexport const DELETE_SHARE_SUCCESS = 'DELETE_SHARE_SUCCESS';\nexport const DELETE_SHARE_FAILURE = 'DELETE_SHARE_FAILURE';\nexport const DELETE_CONTACT_STARTED = 'DELETE_CONTACT_STARTED';\nexport const DELETE_CONTACT_SUCCESS = 'DELETE_CONTACT_SUCCESS';\nexport const DELETE_CONTACT_FAILURE = 'DELETE_CONTACT_FAILURE';\nexport const INITIATE_USER_UPDATE_STARTED = 'INITIATE_USER_UPDATE_STARTED';\nexport const INITIATE_USER_UPDATE_SUCCESS = 'INITIATE_USER_UPDATE_SUCCESS';\nexport const INITIATE_USER_UPDATE_FAILURE = 'INITIATE_USER_UPDATE_FAILURE';\nexport const FETCH_BY_EMAIL_STARTED = 'FETCH_BY_EMAIL_STARTED';\nexport const FETCH_BY_EMAIL_SUCCESS = 'FETCH_BY_EMAIL_SUCCESS';\nexport const FETCH_BY_EMAIL_FAILURE = 'FETCH_BY_EMAIL_FAILURE';\n","import {\n    INITIATE_LOGIN_STARTED,\n    INITIATE_LOGIN_SUCCESS,\n    INITIATE_LOGIN_FAILURE,\n    INITIATE_LOGOUT_STARTED,\n    INITIATE_LOGOUT_FAILURE,\n    INITIATE_LOGOUT_SUCCESS,\n    GET_USER_DATA_SUCCESS,\n    INITIATE_REGISTER_STARTED,\n    INITIATE_REGISTER_SUCCESS,\n    INITIATE_REGISTER_FAILURE,\n    LOCATION_CHANGED,\n    SET_ALERT,\n    INITIATE_CONTACT_CREATE_STARTED,\n    INITIATE_CONTACT_CREATE_FAILURE,\n    INITIATE_CONTACT_CREATE_SUCCESS,\n    FETCH_CONTACT_LIST_STARTED,\n    FETCH_CONTACT_LIST_FAILURE,\n    FETCH_CONTACT_LIST_SUCCESS,\n    FETCH_CONTACT_FAILURE,\n    FETCH_CONTACT_STARTED,\n    FETCH_CONTACT_SUCCESS,\n    INITIATE_CONTACT_EDIT_FAILURE,\n    INITIATE_CONTACT_EDIT_STARTED,\n    INITIATE_CONTACT_EDIT_SUCCESS,\n    INITIATE_CONTACT_SHARE_FAILURE,\n    INITIATE_CONTACT_SHARE_STARTED,\n    INITIATE_CONTACT_SHARE_SUCCESS,\n    FETCH_SHARED_FOR_USER_FAILURE,\n    FETCH_SHARED_FOR_USER_STARTED,\n    FETCH_SHARED_FOR_USER_SUCCESS,\n    DELETE_SHARE_FAILURE,\n    DELETE_SHARE_STARTED,\n    DELETE_SHARE_SUCCESS,\n    DELETE_CONTACT_FAILURE,\n    DELETE_CONTACT_STARTED,\n    DELETE_CONTACT_SUCCESS,\n    INITIATE_USER_UPDATE_STARTED,\n    INITIATE_USER_UPDATE_FAILURE,\n    INITIATE_USER_UPDATE_SUCCESS,\n    FETCH_BY_EMAIL_FAILURE,\n    FETCH_BY_EMAIL_STARTED,\n    FETCH_BY_EMAIL_SUCCESS\n} from \"../constants/actionTypes\";\nimport axios from \"axios\";\n\nconst HOST = 'http://localhost/';\n\n//getUserData\nexport const getUserData = (id) => {\n    return dispatch => {\n        //dispatch(getUserDataStarted());\n        if (id !== null) {\n            let userId = id.split('/');\n            axios\n                .get(HOST + \"api/users/\" + userId.pop(), {withCredentials: true})\n                .then(res => {\n                    dispatch(getUserDataSuccess(res));\n                })\n                .catch(err => {\n                    //dispatch(getUserDataFailed(err.message));\n                });\n        }\n    };\n};\nexport const getUserDataSuccess = payload => {\n    return {\n        type: GET_USER_DATA_SUCCESS,\n        payload: {\n            payload\n        }\n    };\n};\n\n//initiateLogin\nexport const initiateLogin = (email, password) => {\n    return dispatch => {\n        dispatch(initiateLoginStarted());\n\n        axios\n            .post(HOST + \"login\", {\n                \"email\": email,\n                \"password\": password\n            })\n            .then(res => {\n                if (res.headers.location) {\n                    localStorage.setItem('user', res.headers.location);\n                }\n                dispatch(getUserData(res.headers.location));\n                dispatch(initiateLoginSuccess(res));\n            })\n            .catch(err => {\n                dispatch(initiateLoginFailed(err));\n            });\n    };\n};\nconst initiateLoginStarted = () => {\n    return {\n        type: INITIATE_LOGIN_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst initiateLoginSuccess = payload => {\n    return {\n        type: INITIATE_LOGIN_SUCCESS,\n        payload: {\n            payload\n        }\n    };\n};\nconst initiateLoginFailed = error => {\n    return {\n        type: INITIATE_LOGIN_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//initiateLogout\nexport const initiateLogout = () => {\n    return dispatch => {\n        dispatch(initiateLogoutStarted());\n        axios\n            .post(HOST + \"logout\")\n            .then(res => {\n                localStorage.removeItem('user');\n                dispatch(initiateLogoutSuccess(res));\n            })\n            .catch(err => {\n                dispatch(initiateLogoutFailed(err.message));\n            });\n    };\n};\nconst initiateLogoutStarted = () => {\n    return {\n        type: INITIATE_LOGOUT_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst initiateLogoutSuccess = payload => {\n    return {\n        type: INITIATE_LOGOUT_SUCCESS,\n        payload: {\n            payload\n        }\n    };\n};\nconst initiateLogoutFailed = error => {\n    return {\n        type: INITIATE_LOGOUT_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//initiateRegister\nexport const initiateRegister = (email, password) => {\n    return dispatch => {\n        dispatch(initiateRegisterStarted());\n\n        axios\n            .post(HOST + \"api/users\", {\n                \"email\": email,\n                \"password\": password\n            }, {withCredentials: true})\n            .then(res => {\n                dispatch(initiateRegisterSuccess(res));\n            })\n            .catch(err => {\n                dispatch(initiateRegisterFailed(err));\n            });\n    };\n};\nconst initiateRegisterStarted = () => {\n    return {\n        type: INITIATE_REGISTER_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst initiateRegisterSuccess = payload => {\n    return {\n        type: INITIATE_REGISTER_SUCCESS,\n        payload: {\n            payload\n        }\n    };\n};\nconst initiateRegisterFailed = error => {\n    return {\n        type: INITIATE_REGISTER_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\nexport const locationChanged = () => {\n    return {\n        type: LOCATION_CHANGED,\n        payload: {}\n    };\n};\nexport const setAlert = (msg) => {\n    return {\n        type: SET_ALERT,\n        payload: {msg: msg}\n    };\n};\n\n//initiateContactCreate\nexport const initiateContactCreate = (ownerId, name, phone) => {\n    return dispatch => {\n        dispatch(initiateContactCreateStarted());\n\n        axios\n            .post(HOST + \"api/contacts\", {\n                \"name\": name,\n                \"phone\": phone,\n                \"isPublic\": true,\n                \"owner\": \"/api/users/\" + ownerId\n            }, {withCredentials: true})\n            .then(res => {\n                dispatch(initiateContactCreateSuccess(res));\n            })\n            .catch(err => {\n                dispatch(initiateContactCreateFailed(err));\n            });\n    };\n};\nconst initiateContactCreateStarted = () => {\n    return {\n        type: INITIATE_CONTACT_CREATE_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst initiateContactCreateSuccess = payload => {\n    return {\n        type: INITIATE_CONTACT_CREATE_SUCCESS,\n        payload: {\n            payload\n        }\n    };\n};\nconst initiateContactCreateFailed = error => {\n    return {\n        type: INITIATE_CONTACT_CREATE_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//fetchContactList\nexport const fetchContactList = (owner, page) => {\n    return dispatch => {\n        dispatch(fetchContactListStarted());\n\n        axios\n            .get(HOST + \"api/contacts?owner=\" + owner\n                + \"&page=\" + page, {withCredentials: true})\n            .then(res => {\n                dispatch(fetchContactListSuccess(res, page));\n            })\n            .catch(err => {\n                dispatch(fetchContactListFailed(err));\n            });\n    };\n};\nconst fetchContactListStarted = () => {\n    return {\n        type: FETCH_CONTACT_LIST_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst fetchContactListSuccess = (payload, page) => {\n    return {\n        type: FETCH_CONTACT_LIST_SUCCESS,\n        payload: {\n            items: payload,\n            page: page\n        }\n    };\n};\nconst fetchContactListFailed = error => {\n    return {\n        type: FETCH_CONTACT_LIST_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//fetchContact\nexport const fetchContact = (id) => {\n    return dispatch => {\n        dispatch(fetchContactStarted());\n\n        axios\n            .get(HOST + \"api/contacts/\" + id, {withCredentials: true})\n            .then(res => {\n                dispatch(fetchContactSuccess(res, id));\n            })\n            .catch(err => {\n                dispatch(fetchContactFailed(err));\n            });\n    };\n};\nconst fetchContactStarted = () => {\n    return {\n        type: FETCH_CONTACT_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst fetchContactSuccess = (payload, id) => {\n    return {\n        type: FETCH_CONTACT_SUCCESS,\n        payload: {\n            item: payload,\n            id: id\n        }\n    };\n};\nconst fetchContactFailed = error => {\n    return {\n        type: FETCH_CONTACT_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//initiateContactEdit\nexport const initiateContactEdit = (ownerId, id, name, phone) => {\n    return dispatch => {\n        dispatch(initiateContactEditStarted());\n\n        axios\n            .put(HOST + \"api/contacts/\" + id, {\n                \"name\": name,\n                \"phone\": phone,\n                \"isPublic\": true,\n                \"owner\": \"/api/users/\" + ownerId\n            }, {withCredentials: true})\n            .then(res => {\n                dispatch(initiateContactEditSuccess(res));\n            })\n            .catch(err => {\n                dispatch(initiateContactEditFailed(err));\n            });\n    };\n};\nconst initiateContactEditStarted = () => {\n    return {\n        type: INITIATE_CONTACT_EDIT_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst initiateContactEditSuccess = payload => {\n    return {\n        type: INITIATE_CONTACT_EDIT_SUCCESS,\n        payload: {\n            payload\n        }\n    };\n};\nconst initiateContactEditFailed = error => {\n    return {\n        type: INITIATE_CONTACT_EDIT_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//initiateContactShare\nexport const initiateContactShare = (contact, user) => {\n    return dispatch => {\n        dispatch(initiateContactShareStarted());\n\n        axios\n            .post(HOST + \"api/share_contact_to_users\", {\n                \"contact\": contact,\n                \"user\": user\n            }, {withCredentials: true})\n            .then(res => {\n                dispatch(initiateContactShareSuccess(res));\n            })\n            .catch(err => {\n                dispatch(initiateContactShareFailed(err));\n            });\n    };\n};\nconst initiateContactShareStarted = () => {\n    return {\n        type: INITIATE_CONTACT_SHARE_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst initiateContactShareSuccess = payload => {\n    return {\n        type: INITIATE_CONTACT_SHARE_SUCCESS,\n        payload: {\n            payload\n        }\n    };\n};\nconst initiateContactShareFailed = error => {\n    return {\n        type: INITIATE_CONTACT_SHARE_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//fetchSharedForUser\nexport const fetchSharedForUser = (id, page) => {\n    return dispatch => {\n        dispatch(fetchSharedForUserStarted());\n\n        axios\n            .get(\n                HOST + \"api/share_contact_to_users?user=\" + id + \"&page=\" + page,\n                {withCredentials: true}\n                )\n            .then(res => {\n                dispatch(fetchSharedForUserSuccess(res, page));\n            })\n            .catch(err => {\n                dispatch(fetchSharedForUserFailed(err));\n            });\n    };\n};\nconst fetchSharedForUserStarted = () => {\n    return {\n        type: FETCH_SHARED_FOR_USER_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst fetchSharedForUserSuccess = (payload, page) => {\n    return {\n        type: FETCH_SHARED_FOR_USER_SUCCESS,\n        payload: {\n            item: payload,\n            page: page\n        }\n    };\n};\nconst fetchSharedForUserFailed = error => {\n    return {\n        type: FETCH_SHARED_FOR_USER_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//deleteShare\nexport const deleteShare = (id) => {\n    return dispatch => {\n        dispatch(deleteShareStarted());\n\n        axios\n            .delete(\n                HOST + \"api/share_contact_to_users/\" + id,\n                {withCredentials: true}\n            )\n            .then(res => {\n                dispatch(deleteShareSuccess(id));\n            })\n            .catch(err => {\n                dispatch(deleteShareFailed(err));\n            });\n    };\n};\nconst deleteShareStarted = () => {\n    return {\n        type: DELETE_SHARE_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst deleteShareSuccess = (id) => {\n    return {\n        type: DELETE_SHARE_SUCCESS,\n        payload: {\n            id: id\n        }\n    };\n};\nconst deleteShareFailed = error => {\n    return {\n        type: DELETE_SHARE_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//deleteContact\nexport const deleteContact = (id) => {\n    return dispatch => {\n        dispatch(deleteContactStarted());\n\n        axios\n            .delete(\n                HOST + \"api/contacts/\" + id,\n                {withCredentials: true}\n            )\n            .then(res => {\n                dispatch(deleteContactSuccess(id));\n            })\n            .catch(err => {\n                dispatch(deleteContactFailed(err));\n            });\n    };\n};\nconst deleteContactStarted = () => {\n    return {\n        type: DELETE_CONTACT_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst deleteContactSuccess = (id) => {\n    return {\n        type: DELETE_CONTACT_SUCCESS,\n        payload: {\n            id: id\n        }\n    };\n};\nconst deleteContactFailed = error => {\n    return {\n        type: DELETE_CONTACT_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//initiateUserUpdate\nexport const initiateUserUpdate = (id, phone) => {\n    return dispatch => {\n        dispatch(initiateUserUpdateStarted());\n\n        axios\n            .put(HOST + \"api/users/\" + id, {\n                \"phoneNumber\": phone\n            }, {withCredentials: true})\n            .then(res => {\n                dispatch(initiateUserUpdateSuccess(res));\n            })\n            .catch(err => {\n                dispatch(initiateUserUpdateFailed(err));\n            });\n    };\n};\nconst initiateUserUpdateStarted = () => {\n    return {\n        type: INITIATE_USER_UPDATE_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst initiateUserUpdateSuccess = payload => {\n    return {\n        type: INITIATE_USER_UPDATE_SUCCESS,\n        payload: {\n            payload\n        }\n    };\n};\nconst initiateUserUpdateFailed = error => {\n    return {\n        type: INITIATE_USER_UPDATE_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n\n//fetchByEmail\nexport const fetchByEmail = (email, page) => {\n    return dispatch => {\n        dispatch(fetchByEmailStarted());\n\n        axios\n            .get(\n                HOST + \"api/users?properties%5B%5D=email&properties%5B%5D=id&email=\"\n                + encodeURIComponent(email) + \"&page=\" + page,\n                {withCredentials: true}\n            )\n            .then(res => {\n                dispatch(fetchByEmailSuccess(res, email, page));\n            })\n            .catch(err => {\n                dispatch(fetchByEmailFailed(err));\n            });\n    };\n};\nconst fetchByEmailStarted = () => {\n    return {\n        type: FETCH_BY_EMAIL_STARTED,\n        payload: {\n            isLoading: true\n        }\n    };\n};\nconst fetchByEmailSuccess = (payload, email, page) => {\n    return {\n        type: FETCH_BY_EMAIL_SUCCESS,\n        payload: {\n            item: payload,\n            email: email,\n            page: page\n        }\n    };\n};\nconst fetchByEmailFailed = error => {\n    return {\n        type: FETCH_BY_EMAIL_FAILURE,\n        payload: {\n            error\n        }\n    };\n};\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router\";\nimport {Link} from \"react-router-dom\";\nimport {fetchContactList, setAlert, deleteContact} from \"../../../../actions\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Pagination from \"react-bootstrap/Pagination\";\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchContactList: (owner, page) => dispatch(fetchContactList(owner, page)),\n        deleteContact: (id) => dispatch(deleteContact(id)),\n        setAlert: (msg) => dispatch(setAlert(msg))\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {...state};\n};\n\nclass List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            msg: ''\n        };\n        this.onDeleteClick = this.onDeleteClick.bind(this);\n    }\n    onDeleteClick(event) {\n        event.preventDefault();\n        this.props.deleteContact(event.target.dataset.id.split('/').pop());\n    }\n    getContacts() {\n        if (this.props.contacts[this.props.match.params.id]) {\n            let contacts = this.props.contacts[this.props.match.params.id]['hydra:member'];\n\n            const listItems = contacts.map((contact) =>\n              <ListGroup.Item key={contact['@id']}>\n                  <h5>{contact['name']} <span style={{fontWeight: \"normal\", fontSize: \"small\"}}>{\n                      new Intl.DateTimeFormat(\n                          \"en-GB\",\n                          {\n                              year: \"numeric\",\n                              month: \"long\",\n                              day: \"2-digit\",\n                              hour: 'numeric',\n                              minute: 'numeric',\n                              second: 'numeric'\n                          }\n                      ).format(new Date(contact['createdAt']))\n                  }</span></h5>\n                  <p>{contact['phone']}</p>\n                  <Link to={\"/user/contacts/edit/\" + contact['@id'].split('/').pop()}>Edit Contact</Link>\n                  <span> | </span>\n                  <Link to={\"/user/contacts/share/\" + contact['@id'].split('/').pop()}>Share Contact</Link>\n                  <span> | </span>\n                  <a href=\"#\" data-id={contact['@id'].split('/').pop()} onClick={this.onDeleteClick} >Delete Contact</a>\n              </ListGroup.Item>\n            );\n\n            return (\n                <ListGroup>\n                    {listItems}\n                </ListGroup>\n            );\n        }\n\n        return '';\n    }\n    getPager() {\n        if (this.props.contacts[this.props.match.params.id]) {\n            let view = this.props.contacts[this.props.match.params.id]['hydra:view'];\n            if (false === view['@id'].includes('page=')) {\n                return '';\n            }\n            const first = view['hydra:first']\n                ? <Pagination.First>\n                    <Link to={\"/user/contacts/list/\" + view['hydra:first'].split('page=').pop()}>\n                        First\n                    </Link>\n                </Pagination.First>\n                : ''\n            ;\n\n            const next = view['hydra:next']\n                ? <>\n                    <Pagination.Next>\n                        <Link to={\"/user/contacts/list/\"\n                        + view['hydra:next'].split('page=').pop()}>\n                            Next\n                        </Link>\n                    </Pagination.Next>\n                    <Pagination.Ellipsis />\n                </>\n                : ''\n            ;\n            const prev = view['hydra:previous']\n                ? <>\n                    <Pagination.Ellipsis />\n                    <Pagination.Prev>\n                        <Link to={\"/user/contacts/list/\"\n                            + view['hydra:previous'].split('page=').pop()}>\n                            Previous\n                        </Link>\n                    </Pagination.Prev>\n                </>\n                : ''\n            ;\n            const last = view['hydra:last']\n                ? <Pagination.Last>\n                    <Link to={\"/user/contacts/list/\" + view['hydra:last'].split('page=').pop()}>\n                        Last\n                    </Link>\n                </Pagination.Last>\n                : ''\n            ;\n            const curPage = view['@id'].split('page=').pop();\n            const space = <span> </span>;\n            const current = view['@id']\n                ? <Pagination.Item active><span> {curPage} </span></Pagination.Item>\n                : '';\n\n            return (\n                <div>\n                    <Pagination>\n                        {first}\n                        {prev}\n                        {current}\n                        {next}\n                        {last}\n                    </Pagination>\n                </div>\n            );\n        }\n    }\n    componentDidMount() {\n        this.props.history.listen((location) => {\n            let pathParts = location.pathname.split('/');\n            const pageId = pathParts.pop();\n            const lastPart = pathParts.pop();\n            const preLastPart = pathParts.pop();\n            if (preLastPart === 'contacts' && lastPart === 'list') {\n                if (false === this.props.dataFetchFinished && false === this.props.loading) {\n                    let user = null === this.props.user ? localStorage.getItem('user') : this.props.user;\n                    this.props.fetchContactList(user, pageId);\n                }\n            }\n        });\n        if (false === this.props.dataFetchFinished && false === this.props.loading) {\n            let user = null === this.props.user ? localStorage.getItem('user') : this.props.user;\n            this.props.fetchContactList(user, this.props.match.params.id);\n        }\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (Object.keys(this.props.deleted).length > 0) {\n            let user = null === this.props.user ? localStorage.getItem('user') : this.props.user;\n            this.props.fetchContactList(user, this.props.match.params.id);\n            if (this.state.msg !== \"Contact deleted succesfuly\") {\n                this.setState({msg: \"Contact deleted succesfuly\"});\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Your Contacts</h1>\n                <p>{this.state.msg}</p>\n                {this.getContacts()}\n                {this.getPager()}\n            </div>\n        );\n    }\n}\n\nconst connectedList = connect(mapStateToProps, mapDispatchToProps)(List);\nexport default withRouter(connectedList);\n","import React from \"react\";\nimport {withRouter} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport {initiateContactCreate, setAlert, fetchContact, initiateContactEdit, deleteShare} from \"../../../../actions\";\nimport {Link} from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nconst CREATE = 'Create';\nconst EDIT = 'Edit';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        initiateContactCreate: (ownerId, name, phone) => dispatch(initiateContactCreate(ownerId, name, phone)),\n        initiateContactEdit: (ownerId, id, name, phone) => dispatch(initiateContactEdit(ownerId, id, name, phone)),\n        deleteShare: (id) => dispatch(deleteShare(id)),\n        fetchContact: (id) => dispatch(fetchContact(id)),\n        setAlert: (msg) => dispatch(setAlert(msg))\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {...state};\n};\n\nclass ContactsCreateEdit extends React.Component {\n    _isMounted = false;\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            phone: '',\n            contactShares: null,\n            error: null,\n            refreshing: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n    handleChange(event) {\n        this.setState({\n            ...this.state,\n            [event.target.id]: event.target.value\n        });\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        if (CREATE === this.getCreateOrEdit()) {\n            this.props.initiateContactCreate(\n                this.props.user.split('/').pop(),\n                this.state.name,\n                this.state.phone\n            );\n        } else {\n            this.props.initiateContactEdit(\n                this.props.user.split('/').pop(),\n                this.getContactId(),\n                this.state.name,\n                this.state.phone\n            );\n        }\n    }\n    handleDelete(event) {\n        this.props.deleteShare(event.target.dataset.id.split('/').pop());\n    }\n    getCreateOrEdit() {\n        if (this.props.match.params.id) {\n            return EDIT;\n        }\n\n        return CREATE;\n    }\n    getContactId() {\n        if (this.props.match.params.id) {\n            return this.props.match.params.id;\n        }\n\n        return null;\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (true === this.props.loaded) {\n            if (true === this.props.mainActionFinished) {\n                const msg = this.getCreateOrEdit() === CREATE\n                    ? 'Succesfuly created Contact'\n                    : 'Succesfuly updated Contact';\n                this.props.setAlert(msg);\n                this.props.history.push('/user/contacts/list/1');\n            } else if (true === this.props.dataFetchFinished) {\n                const thisContact = this.props.contact[this.getContactId()];\n                if (thisContact && this.state.refreshing) {\n                    this.setState(\n                        {\n                            ...this.state,\n                            refreshing: false,\n                            name: thisContact.name,\n                            phone: thisContact.phone,\n                            contactShares: thisContact.contactShares\n                        }\n                    );\n                }\n            }\n            //need to check if main action is finished\n        }\n    }\n    componentDidMount() {\n        this._isMounted = true;\n        if (EDIT === this.getCreateOrEdit()) {\n            const nid = this.getContactId();\n            if (nid !== 'create') {\n                this.setState({...this.setState, refreshing: true})\n                this.props.fetchContact(nid);\n            }\n        }\n        this.props.history.listen((location) => {\n            if (location.pathname.split('/').pop() === 'create') {\n                if (this._isMounted) {\n                    this.setState({\n                        name: '',\n                        phone: '',\n                        error: null,\n                        refreshing: false\n                    });\n                }\n            }\n        });\n    }\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    getForm() {\n        const error = '';\n        if (this.state.refreshing) {\n            return <div>Refreshing Contact data for editing</div>\n        }\n\n        return <Form>\n            <Form.Group>\n                <Form.Label>Name</Form.Label>\n                <Form.Control onChange={this.handleChange} value={this.state.name} type=\"text\" placeholder=\"Enter name\" name=\"name\" id=\"name\" />\n                <Form.Text className=\"text-muted\">\n                    Your contact name\n                </Form.Text>\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>Phone</Form.Label>\n                <Form.Control onChange={this.handleChange} value={this.state.phone} type=\"text\" placeholder=\"Contact phone\" name=\"phone\" id=\"phone\" />\n                <Form.Text className=\"text-muted\">\n                    Contact phone number\n                </Form.Text>\n            </Form.Group>\n            <Button variant=\"primary\" onClick={this.handleSubmit} type=\"submit\">{this.getCreateOrEdit() + \" Contact\"}</Button>\n            {error}\n        </Form>;\n    }\n    getContactShares() {\n        if (null === this.state.contactShares) {\n            return '';\n        }\n        const items = this.state.contactShares.map((contactShare) =>\n            <ListGroup.Item key={contactShare['@id']}>\n                {contactShare['user']['email']}<span> </span>\n                {\n                    this.props.deleted.hasOwnProperty(contactShare['@id'].split('/').pop())\n                    ? ' - Sharing removed '\n                    : <Button variant=\"outline-danger\" onClick={this.handleDelete} className=\"share-delete\" data-id={contactShare['@id']}>\n                        Remove sharing</Button>\n                }\n            </ListGroup.Item>\n        );\n\n        return <div>\n            <hr />\n            <h2>Shared with:</h2>\n            <ListGroup>\n                {items}\n            </ListGroup>\n            <hr />\n        </div>;\n    }\n    render() {\n\n        const shareThis = EDIT === this.getCreateOrEdit()\n            ? <Link to={\"/user/contacts/share/\" + this.props.match.params.id}>Share this contact</Link>\n            : ''\n        ;\n\n        return (\n            <div>\n                <h1>{this.getCreateOrEdit()} Contact</h1>\n                {this.getForm()}\n                {this.getContactShares()}\n                {shareThis}\n            </div>\n        );\n    }\n}\n\nconst connectedContactsCreateEdit = connect(mapStateToProps, mapDispatchToProps)(ContactsCreateEdit);\nexport default withRouter(connectedContactsCreateEdit);\n","import React from \"react\";\nimport {connect} from 'react-redux';\nimport {initiateContactShare, setAlert, fetchByEmail} from \"../../../../actions\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        initiateContactShare: (contact, user) => dispatch(initiateContactShare(contact, user)),\n        setAlert: (msg) => dispatch(setAlert(msg)),\n        fetchByEmail: (email, page) => dispatch(fetchByEmail(email, page))\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {...state};\n};\n\nclass ContactsShare extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: '',\n            userid: null\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSearchSubmit = this.handleSearchSubmit.bind(this);\n        this.handleShareSubmit = this.handleShareSubmit.bind(this);\n        this.getResults = this.getResults.bind(this);\n    }\n    handleChange(event) {\n        this.setState({\n            ...this.state,\n            [event.target.id]: event.target.value\n        });\n    }\n    handleSearchSubmit(event) {\n        event.preventDefault();\n        this.props.fetchByEmail(this.state.user, 1);\n\n        return false;\n    }\n    handleShareSubmit(event) {\n        event.preventDefault();\n        this.props.initiateContactShare(\n            \"/api/contacts/\" + this.props.match.params.id,\n            this.state.userid\n        );\n\n        return false;\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (true === this.props.loaded) {\n            if (true === this.props.mainActionFinished) {\n                this.props.setAlert('Contact shared succesfuly');\n                this.props.history.push('/user/contacts/list/1');\n            }\n        }\n    }\n\n    getForm() {\n        let error = '';\n        if (this.props.error !== null) {\n            if (\n                this.props.error.response\n                && this.props.error.response.data\n                && this.props.error.response.data.error\n            ) {\n                error = <p>{this.props.error.response.data.error}</p>\n            } else if (\n                this.props.error.response\n                && this.props.error.response.data\n            ) {\n                error = <p>{this.props.error.response.data['hydra:description'].replace(/^contact\\:\\s/, \"\")}</p>\n            } else {\n                error = <p>{this.props.error.message}</p>\n            }\n        }\n\n        return (\n            <div>\n                <Form onSubmit={this.handleSearchSubmit}>\n                    <Form.Group>\n                        <Form.Label>Search by user email</Form.Label>\n                        <Form.Control onChange={this.handleChange} value={this.state.title} type=\"text\" placeholder=\"Enter user email\" name=\"user\" id=\"user\" />\n                        <Form.Text className=\"text-muted\">\n                            Enter at least the portion of email you want to share a contact with\n                        </Form.Text>\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">Search</Button>\n                </Form>\n                <p>{error}</p>\n            </div>\n        );\n    }\n    getResults() {\n        if (this.props.search[this.state.user]) {\n            let res = this.props.search[this.state.user][1]['hydra:member'];\n\n            const results = res.map(function(result) {\n\n                return <option value={result['@id']} key={result['@id']}>{result.email}</option>;\n            });\n\n            return (\n                <Form onSubmit={this.handleShareSubmit}>\n                    <Form.Group>\n                        <Form.Label>Select a user</Form.Label>\n                        <Form.Control as=\"select\" custom id=\"userid\" name=\"userid\"  onChange={this.handleChange}>\n                            {results}\n                        </Form.Control>\n                        <Form.Text className=\"text-muted\">\n                            Select specific user by email you want to share a contact with\n                        </Form.Text>\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">Share</Button>\n                </Form>\n            );\n        }\n\n        return '';\n    }\n    render() {\n        return (\n            <div>\n                <h1>Share a contact</h1>\n                {this.getForm()}\n                {this.getResults()}\n            </div>\n        );\n    }\n}\n\nconst ConnectedContactsShare = connect(mapStateToProps, mapDispatchToProps)(ContactsShare);\nexport default ConnectedContactsShare;\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\nimport {fetchSharedForUser, setAlert} from \"../../../../actions\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchSharedForUser: (id, page) => dispatch(fetchSharedForUser(id, page)),\n        setAlert: (msg) => dispatch(setAlert(msg))\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {...state};\n};\n\n\nclass ContactsSharedWithMe extends React.Component {\n    componentDidMount() {\n        let user = this.props.user;\n        if (null === user) {\n            user = localStorage.getItem('user');\n        }\n        this.props.fetchSharedForUser(user, 1);\n    }\n\n    getContacts() {\n        if (this.props.shared[this.props.match.params.id]) {\n            let contacts = this.props.shared[this.props.match.params.id]['hydra:member'];\n\n            console.log(contacts);\n\n            const listItems = contacts.map((contact) =>\n                <ListGroup.Item key={contact['contact']['@id']}>\n                    <h5>{contact['contactOwner']}<span> </span>\n                        <span style={{fontWeight: \"normal\", fontSize: \"small\"}}>{\n                            new Intl.DateTimeFormat(\n                                \"en-GB\",\n                                {\n                                    year: \"numeric\",\n                                    month: \"long\",\n                                    day: \"2-digit\",\n                                    hour: 'numeric',\n                                    minute: 'numeric',\n                                    second: 'numeric'\n                                }\n                            ).format(new Date(contact['contact']['createdAt']))\n                        }</span>\n                    </h5>\n                    <p><b>{contact['contact']['name']}</b></p>\n                    <p>{contact['contact']['phone']}</p>\n                </ListGroup.Item>\n            );\n\n            return (\n                <ListGroup>\n                    {listItems}\n                </ListGroup>\n            );\n        }\n\n        return '';\n    }\n\n    getPager() {\n        return '';\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Contacts shared with me</h1>\n                {this.getContacts()}\n                {this.getPager()}\n            </div>\n        );\n    }\n}\n\nconst ConnectedContactsSharedWithMe = connect(mapStateToProps, mapDispatchToProps)(ContactsSharedWithMe);\nexport default withRouter(ConnectedContactsSharedWithMe);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {initiateUserUpdate} from \"../../../actions\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nconst mapStateToProps = (state) => {\n    return {...state};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        initiateUserUpdate: (id, phone) => dispatch(initiateUserUpdate(id, phone))\n    };\n};\n\nclass UserSettings extends React.Component {\n    dataLoaded = false;\n    constructor(props) {\n        super(props);\n        this.state = {\n            phone: '',\n            msg: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(event) {\n        this.setState({\n            ...this.state,\n            [event.target.id]: event.target.value\n        });\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        const user = null === this.props.user ? localStorage.getItem('user') : this.props.user;\n        this.props.initiateUserUpdate(user.split('/').pop(), this.state.phone);\n    }\n    componentDidMount() {\n        if (this.props.userFetchFinished && !this.dataLoaded) {\n            this.setState({\n                phone: this.props.userData.phoneNumber\n            });\n            this.dataLoaded = true;\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.userFetchFinished && !this.dataLoaded) {\n            this.setState({\n                phone: this.props.userData.phoneNumber\n            });\n            this.dataLoaded = true;\n        }\n        if (this.props.mainActionFinished && this.state.msg !== 'User profile updated succesfuly') {\n            this.setState({\n                msg: 'User profile updated succesfuly'\n            });\n\n        }\n    }\n\n    render() {\n        let error = '';\n        if (this.props.error) {\n            if (\n                this.props.error.response\n                && this.props.error.response.data\n                && this.props.error.response.data.error\n            ) {\n                error = <p>{this.props.error.response.data.error}</p>\n            } else {\n                error = <p>{this.props.error.message}</p>\n            }\n        }\n        const phone = this.state.phone ? this.state.phone : '';\n\n        return (\n            <div>\n                <h1>Profile</h1>\n                <p>{this.state.msg}</p>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Phone</Form.Label>\n                        <Form.Control onChange={this.handleChange} value={phone} type=\"text\" placeholder=\"Enter your phone\" name=\"phone\" id=\"phone\" />\n                        <Form.Text className=\"text-muted\">\n                            This one is only for admin contact and is only visible to owner(you) and admin\n                        </Form.Text>\n                    </Form.Group>\n\n                    <Button variant=\"primary\" onClick={this.handleSubmit} type=\"submit\">Update</Button>\n                    {error}\n                </Form>\n            </div>\n        );\n    }\n}\nconst connectedUserSettings = connect(mapStateToProps, mapDispatchToProps)(UserSettings);\nexport default connectedUserSettings;\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {getUserData, initiateLogout} from \"../../actions\";\nimport {withRouter} from 'react-router';\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport List from \"./User/Contacts/List\";\nimport ContactsCreateEdit from \"./User/Contacts/ContactsCreateEdit\";\nimport ContactsShare from \"./User/Contacts/ContactsShare\";\nimport ContactsSharedWithMe from \"./User/Contacts/ContactsSharedWithMe\";\nimport UserSettings from \"./User/UserSettings\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {STORE_NAME} from \"../../constants/strings\";\n\nconst mapStateToProps = (state) => {\n    return {...state};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        initiateLogout: () => dispatch(initiateLogout()),\n        getUserData: (id) => dispatch(getUserData(id))\n    };\n};\n\nclass User extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleLogoutClick = this.handleLogoutClick.bind(this);\n        let user = localStorage.getItem('user');\n        this.state = {\n            user: user\n        };\n    }\n    handleLogoutClick(event) {\n        this.props.initiateLogout();\n    }\n    componentDidMount() {\n        if (null !== this.state.user && null === this.props.user) {\n            this.props.getUserData(this.state.user);\n        }\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (null === this.props.user && true === this.props.loaded) {\n            this.props.history.push('/');\n        }\n    }\n    render() {\n\n        if (this.props.userData === null) {\n            this.props.getUserData(this.props.user);\n        }\n        const email = this.props.userData ? this.props.userData.email: '';\n        const alert = this.props.alert ? <Alert variant=\"info\">{this.props.alert}</Alert> : '';\n\n        return (\n            <div>\n                {alert}\n                <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n                    <Navbar.Brand>{STORE_NAME}</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link as={Link} to=\"/user/settings\">Settings</Nav.Link>\n                            <Nav.Link as={Link} to=\"/user/contacts/list/1\">Contacts</Nav.Link>\n                            <Nav.Link as={Link} to=\"/user/contacts/create\">Add Contact</Nav.Link>\n                            <Nav.Link as={Link} to=\"/user/contacts/list/shared-with-me/1\">Shared with me</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                    <Navbar.Brand className=\"navbar-right\"><span style={{color: \"grey\"}}>Email:</span> {email}</Navbar.Brand>\n                    <Button onClick={this.handleLogoutClick} variant=\"dark\">Log out</Button>\n                </Navbar>\n                <Switch>\n                    <Route path=\"/user/contacts/list/:id(\\d+)\" component={List} />\n                    <Route path=\"/user/contacts/create\" component={ContactsCreateEdit} />\n                    <Route path=\"/user/contacts/edit/:id(\\d+)\" component={ContactsCreateEdit} />\n                    <Route path=\"/user/contacts/share/:id(\\d+)\" component={ContactsShare} />\n                    <Route path=\"/user/contacts/list/shared-with-me/:id(\\d+)\" component={ContactsSharedWithMe} />\n                    <Route path=\"/user/settings\" component={UserSettings} />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nconst connectedUser = connect(mapStateToProps, mapDispatchToProps)(User);\n\nexport default withRouter(connectedUser);\n","export const STORE_NAME = 'Phonebook Contacts';\n","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport {Link} from \"react-router-dom\";\nimport {STORE_NAME} from \"../constants/strings\";\n\nclass UnloggedNavigation extends React.Component {\n    render() {\n        return (\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n                <Navbar.Brand>{STORE_NAME}</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link as={Link} disabled={'login' === this.props.activeLink} to=\"/\">Login</Nav.Link>\n                        <Nav.Link as={Link} disabled={'register' === this.props.activeLink} to=\"/register\">Register</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n\n        );\n    }\n}\n\nexport default UnloggedNavigation;","import React from \"react\";\nimport {withRouter} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport {initiateLogin, getUserData} from \"../actions\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport UnloggedNavigation from \"../components/UnloggedNavigation\";\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        initiateLogin: (email, password) => dispatch(initiateLogin(email, password)),\n        getUserData: (id) => dispatch(getUserData(id))\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {...state};\n};\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        let user = localStorage.getItem('user');\n        this.state = {\n            email: '',\n            password: '',\n            user: user,\n            error: null\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(event) {\n        this.setState({\n            ...this.state,\n            [event.target.id]: event.target.value\n        });\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.initiateLogin(this.state.email, this.state.password);\n    }\n    componentDidMount() {\n        if (this.state.user !== null) {\n            this.props.getUserData(this.state.user);\n        }\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.userData !== null) {\n            this.props.history.push('/user/contacts/list/1');\n        }\n    }\n\n    render() {\n        let error = '';\n        if (this.props.error !== null) {\n            if (\n                this.props.error.response\n                && this.props.error.response.data\n                && this.props.error.response.data.error\n            ) {\n                error =\n                    <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n                        <strong>You got an error!</strong>\n                        <p>\n                            {this.props.error.response.data.error}\n                        </p>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>;\n\n            } else {\n                error = <p>{this.props.error.message}</p>\n            }\n        }\n        const alert = this.props.alert ? <Alert variant=\"info\">{this.props.alert}</Alert> : '';\n\n        return (\n            <div>\n                {alert}\n                {error}\n                <UnloggedNavigation activeLink=\"login\" />\n                <h1>Login</h1>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control onChange={this.handleChange} value={this.state.email} type=\"email\"\n                                      placeholder=\"Enter your email\" name=\"email\" id=\"email\" />\n                        <Form.Text className=\"text-muted\">\n                            Your registered email address\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control onChange={this.handleChange} value={this.state.password} type=\"password\"\n                                      placeholder=\"Enter your password\" name=\"password\" id=\"password\" />\n                        <Form.Text className=\"text-muted\">\n                            Your registration password\n                        </Form.Text>\n                    </Form.Group>\n                    <Button variant=\"primary\" onClick={this.handleSubmit} type=\"submit\">Login</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nconst connectedLogin = connect(mapStateToProps, mapDispatchToProps)(Login);\nexport default withRouter(connectedLogin);\n","import React from \"react\";\nimport {withRouter} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport {initiateRegister, setAlert} from \"../actions\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport UnloggedNavigation from \"../components/UnloggedNavigation\";\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        initiateRegister: (email, password) => dispatch(initiateRegister(email, password)),\n        setAlert: (msg) => dispatch(setAlert(msg))\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {...state};\n};\n\nclass Register extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n            error: null\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(event) {\n        this.setState({\n            ...this.state,\n            [event.target.id]: event.target.value\n        });\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.initiateRegister(this.state.email, this.state.password);\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (null !== this.props.userData) {\n            this.props.history.push('/user/contacts/list/1');\n        }\n        if (true === this.props.loaded) {\n            this.props.setAlert('Succesfuly registered');\n            this.props.history.push('/');\n        }\n    }\n\n    render() {\n        let error = '';\n        if (this.props.error) {\n            if (\n                this.props.error.response\n                && this.props.error.response.data\n                && this.props.error.response.data['hydra:description']\n            ) {\n                error = <Alert variant=\"danger\">\n                    {this.props.error.response.data['hydra:description']}\n                </Alert>;\n            } else {\n                error = <Alert variant=\"danger\">\n                    {this.props.error.message}\n                </Alert>;\n            }\n        }\n\n        return (\n            <div>\n                <UnloggedNavigation activeLink=\"register\" />\n                <h1>Register</h1>\n                <Form>\n                    {error}\n                    <Form.Group>\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control onChange={this.handleChange} value={this.state.email} type=\"email\"\n                                      placeholder=\"Enter your email\" name=\"email\" id=\"email\" />\n                        <Form.Text className=\"text-muted\">\n                            Please enter a valid email address\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control onChange={this.handleChange} value={this.state.password} type=\"password\"\n                                      placeholder=\"Enter your password\" name=\"password\" id=\"password\" />\n                        <Form.Text className=\"text-muted\">\n                            Any non empty password will be ok\n                        </Form.Text>\n                    </Form.Group>\n                    <Button variant=\"primary\" onClick={this.handleSubmit} type=\"submit\">Register</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nconst connectedRegister = connect(mapStateToProps, mapDispatchToProps)(Register);\nexport default withRouter(connectedRegister);\n","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    withRouter\n} from \"react-router-dom\";\nimport User from \"./pages/Logged/User\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport {connect} from \"react-redux\";\nimport {locationChanged} from \"./actions\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        locationChanged: () => dispatch(locationChanged()),\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {...state};\n};\n\nclass AppRouter extends React.Component {\n    componentDidMount() {\n        this.props.history.listen((location) => {\n            this.props.locationChanged();\n        });\n    }\n\n    render() {\n        const loading = this.props.loading\n            ? <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n            : '';\n\n        return (\n            <div>\n                {loading}\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Login />\n                    </Route>\n                    <Route exact path=\"/register\">\n                        <Register />\n                    </Route>\n                    <Route path=\"/user/\">\n                        <User />\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n};\nconst connectedAppRouter = connect(mapStateToProps, mapDispatchToProps)(AppRouter);\nexport default withRouter(connectedAppRouter);\n","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n} from \"react-router-dom\";\nimport AppRouter from \"./AppRouter\";\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Container className=\"p-3\">\n                <Jumbotron>\n                <Router>\n                    <AppRouter />\n                </Router>\n                </Jumbotron>\n            </Container>\n        );\n    }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport {createStore, applyMiddleware} from \"redux\";\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport App from './App';\nimport {Provider} from \"react-redux\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}